---
  - name: "Check if Kubernetes is already initialized"
    ansible.builtin.stat:
      path: /etc/kubernetes/admin.conf
    register: k8s_admin_conf

  - name: "Reset existing Kubernetes cluster if exists"
    ansible.builtin.shell: |
      echo "Resetting existing Kubernetes cluster..."
      kubeadm reset -f
      rm -rf /etc/kubernetes/pki /etc/kubernetes/manifests /var/lib/etcd
      systemctl restart containerd
      echo "Kubernetes cluster reset completed"
    when: k8s_admin_conf.stat.exists
    ignore_errors: true

  - name: "Clean up any remaining Kubernetes files"
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    loop:
      - /etc/kubernetes
      - /var/lib/etcd
      - /var/lib/kubelet
    ignore_errors: true

  - name: "Restart containerd service"
    ansible.builtin.systemd:
      name: containerd
      state: restarted

  - name: "Init First Master Node with HAProxy/Keepalived VIP"
    ansible.builtin.shell: "kubeadm init --control-plane-endpoint '{{ endpoint_lb }}:{{ control_plane_port }}' --upload-certs"
    register: init_output
  
  - name: "Create kubeconfig directory for admin user"
    ansible.builtin.shell: "mkdir -p {{ home_admin }}/.kube"

  - name: "Copy kubeconfig to admin user"
    ansible.builtin.shell: "cp /etc/kubernetes/admin.conf {{ home_admin }}/.kube/config"

  - name: "Set proper ownership for admin kubeconfig"
    ansible.builtin.shell: "chown $(id -u):$(id -g) {{ home_admin }}/.kube/config"

  - name: "Create kubeconfig directory for root user"
    ansible.builtin.shell: "mkdir -p /root/.kube"

  - name: "Copy kubeconfig to root user"
    ansible.builtin.shell: "cp /etc/kubernetes/admin.conf /root/.kube/config"

  - name: "Set proper ownership for root kubeconfig"
    ansible.builtin.shell: "chown root:root /root/.kube/config"

  - name: "Create .bash_profile for admin user if it doesn't exist"
    ansible.builtin.file:
      path: "{{ home_admin }}/.bash_profile"
      state: touch
      owner: "{{ admin }}"
      group: "{{ admin }}"
      mode: '0644'

  - name: "Set Environment KUBECONFIG admin"
    ansible.builtin.lineinfile:
      path: "{{ home_admin }}/.bash_profile"
      line: "export KUBECONFIG={{ home_admin }}/.kube/config"
      state: present
      create: yes

  - name: "Set Environment KUBECONFIG root"
    ansible.builtin.lineinfile:
      path: "/root/.bash_profile"
      line: "export KUBECONFIG=/etc/kubernetes/admin.conf"
      state: present
      create: yes

  - name: "Approve kubelet-serving CSRs"
    ansible.builtin.shell: |
      for kubeletcsr in $(kubectl -n kube-system get csr | grep kubernetes.io/kubelet-serving | awk '{ print $1 }'); do
        kubectl certificate approve $kubeletcsr
      done

  - name: "Upload certificates to generate certificate key"
    ansible.builtin.shell: kubeadm init phase upload-certs --upload-certs
    register: upload_certs_output

  - name: "Extract certificate key from upload-certs output"
    ansible.builtin.set_fact:
      certificate_key: "{{ upload_certs_output.stdout_lines[-1] }}"

  - name: "Create join token for master nodes"
    ansible.builtin.shell: kubeadm token create --print-join-command
    register: token_master

  - name: "Extract join token using regex"
    ansible.builtin.set_fact:
      join_token: "{{ token_master.stdout | regex_search('--token\\s+(\\S+)', '\\1') | first }}"

  - name: "Extract discovery token CA cert hash using regex"
    ansible.builtin.set_fact:
      discovery_token_ca_cert_hash: "{{ token_master.stdout | regex_search('--discovery-token-ca-cert-hash\\s+(\\S+)', '\\1') | first }}"

  - name: "Debug all extracted values"
    ansible.builtin.debug:
      msg: |
        Certificate key: {{ certificate_key }}
        Join token: {{ join_token }}
        Discovery token CA cert hash: {{ discovery_token_ca_cert_hash }}

  - name: "Display join command for master nodes"
    ansible.builtin.debug:
      msg: "To join master nodes, use this command: kubeadm join {{ endpoint_lb }}:{{ control_plane_port }} --token {{ join_token }} --discovery-token-ca-cert-hash {{ discovery_token_ca_cert_hash }} --control-plane --certificate-key {{ certificate_key }}"

  - name: "Display join command for worker nodes"
    ansible.builtin.shell: "kubeadm token create --print-join-command"
    register: token_worker
    ignore_errors: true

  - name: "Display worker join command"
    ansible.builtin.debug:
      msg: "To join worker nodes, use this command: {{ token_worker.stdout }}"
