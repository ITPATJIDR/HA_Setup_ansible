---
  - name: "Check if Kubernetes is already initialized"
    ansible.builtin.stat:
      path: /etc/kubernetes/admin.conf
    register: k8s_admin_conf

  - name: "Reset existing Kubernetes cluster if exists"
    ansible.builtin.shell: |
      echo "Resetting existing Kubernetes cluster..."
      kubeadm reset -f
      rm -rf /etc/kubernetes/pki /etc/kubernetes/manifests /var/lib/etcd
      systemctl restart containerd
      echo "Kubernetes cluster reset completed"
    when: k8s_admin_conf.stat.exists
    ignore_errors: true

  - name: "Clean up any remaining Kubernetes files"
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    loop:
      - /etc/kubernetes
      - /var/lib/etcd
      - /var/lib/kubelet
    ignore_errors: true

  - name: "Restart containerd service"
    ansible.builtin.systemd:
      name: containerd
      state: restarted

  - name: "Create file install config"
    ansible.builtin.copy:
      dest: "{{ home_admin }}/install-k8s-config.yml"
      content: |
        apiVersion: kubeadm.k8s.io/v1beta4
        kind: ClusterConfiguration
        kubernetesVersion: v{{ kube_version }}
        controlPlaneEndpoint: "{{ endpoint_lb }}:{{ control_plane_port }}"
        networking:
          podSubnet: "{{ pod_subnet }}"
          serviceSubnet: "{{ svc_subnet }}"
        localAPIEndpoint:
          advertiseAddress: "{{ ansible_default_ipv4.address }}"
          bindPort: 6443
        ---
        apiVersion: kubeadm.k8s.io/v1beta4
        kind: InitConfiguration
        localAPIEndpoint:
          advertiseAddress: "{{ ansible_default_ipv4.address }}"
          bindPort: 6443
        nodeRegistration:
          criSocket: "unix:///var/run/containerd/containerd.sock"
        ---
        apiVersion: kubelet.config.k8s.io/v1beta1
        kind: KubeletConfiguration
        serverTLSBootstrap: true

  - name: "Init First Master Node"
    ansible.builtin.shell: "kubeadm init --config {{ home_admin }}/install-k8s-config.yml --upload-certs"
    register: init_output
  
  - name: "Create Directory kubeconfig"
    ansible.builtin.file:
      path: "{{ item }}/.kube"
      state: directory
      mode: '0755'
      owner: "{{ ansible_user | default('root') }}"
      group: "{{ ansible_user | default('root') }}"
    loop:
    - "{{ home_admin }}"
    - "/root"

  - name: "Copy File kubeconfig"
    ansible.builtin.shell: "cp /etc/kubernetes/admin.conf {{ item }}/.kube/config"
    loop:
    - "{{ home_admin }}"
    - "/root"
  
  - name: "Change owner file kubeconfig to admin"
    ansible.builtin.file: 
      path: "{{ home_admin }}/.kube"
      owner: "{{ admin }}"
      group: "{{ admin }}"
      recurse: yes  # ใช้ถ้าอยากให้ไฟล์ทั้งหมดในโฟลเดอร์เปลี่ยน owner ด้วย

  - name: "Change owner file kubeconfig to root"
    ansible.builtin.file: 
      path: "/root/.kube"
      owner: root
      group: root
      recurse: yes  # ใช้ถ้าอยากให้ไฟล์ทั้งหมดในโฟลเดอร์เปลี่ยน owner ด้วย
  
  - name: "Set Environment KUBECONFIG admin"
    ansible.builtin.lineinfile:
      path: "{{ home_admin }}/.bash_profile"
      line: "export KUBECONFIG={{ home_admin }}/.kube/config"
      state: present
      insertbefore: EOF 

  - name: "Set Environment KUBECONFIG root"
    ansible.builtin.lineinfile:
      path: "/root/.bash_profile"
      line: "export KUBECONFIG=/etc/kubernetes/admin.conf"
      state: present
      insertbefore: EOF 

  - name: "Approve kubelet-serving CSRs"
    ansible.builtin.shell: |
      for kubeletcsr in $(kubectl -n kube-system get csr | grep kubernetes.io/kubelet-serving | awk '{ print $1 }'); do
        kubectl certificate approve $kubeletcsr
      done

  - name: "Set key variable for join master node"
    ansible.builtin.set_fact:
      certficate_key: "{{ init_output.stdout_lines[39] }}"

  - name: "Print command join master"
    ansible.builtin.shell: kubeadm token create --print-join-command
    register: token_master
  
  - name: "Show join master"
    ansible.builtin.set_fact:
      join_node: "{{ token_master.stdout }}"