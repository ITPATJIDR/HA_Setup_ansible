---
- name: "Update package cache"
  ansible.builtin.apt:
    update_cache: yes

- name: "Install required packages for Harbor"
  ansible.builtin.apt:
    name:
      - curl
      - wget
      - unzip
      - docker.io
      - docker-compose
      - python3-pip
      - ufw
    state: present

- name: "Start and enable Docker service"
  ansible.builtin.systemd:
    name: docker
    enabled: yes
    state: started

- name: "Add current user to docker group"
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: "Create Harbor installation directory"
  ansible.builtin.file:
    path: "{{ harbor_install_dir }}"
    state: directory
    mode: '0755'

- name: "Download Harbor offline installer"
  ansible.builtin.get_url:
    url: "{{ harbor_download_url }}"
    dest: "{{ harbor_install_dir }}/harbor-offline-installer-{{ harbor_version }}.tgz"
    mode: '0644'
    timeout: 300

- name: "Extract Harbor installer"
  ansible.builtin.unarchive:
    src: "{{ harbor_install_dir }}/harbor-offline-installer-{{ harbor_version }}.tgz"
    dest: "{{ harbor_install_dir }}"
    remote_src: yes

- name: "Copy Harbor configuration template"
  ansible.builtin.template:
    src: harbor.yml.j2
    dest: "{{ harbor_install_dir }}/harbor/harbor.yml"
    mode: '0644'
  notify: restart harbor

- name: "Create Harbor data directory"
  ansible.builtin.file:
    path: "{{ harbor_data_dir }}"
    state: directory
    mode: '0755'

- name: "Set Harbor data directory permissions"
  ansible.builtin.file:
    path: "{{ harbor_data_dir }}"
    owner: "{{ harbor_user }}"
    group: "{{ harbor_group }}"
    mode: '0755'
    recurse: yes

- name: "Install Harbor"
  ansible.builtin.shell: |
    cd {{ harbor_install_dir }}/harbor
    ./install.sh --with-trivy
  args:
    creates: "{{ harbor_install_dir }}/harbor/docker-compose.yml"
  register: harbor_install_result

- name: "Wait for Harbor services to start"
  ansible.builtin.wait_for:
    port: "{{ harbor_http_port }}"
    host: "{{ ansible_default_ipv4.address }}"
    delay: 30
    timeout: 300

- name: "Configure firewall for Harbor"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ harbor_http_port }}"
    proto: tcp

- name: "Configure firewall for Harbor HTTPS"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ harbor_https_port }}"
    proto: tcp

- name: "Get Harbor admin password"
  ansible.builtin.shell: |
    if [ -f "{{ harbor_install_dir }}/harbor/harbor.yml" ]; then
      grep -A 1 "harbor_admin_password:" {{ harbor_install_dir }}/harbor/harbor.yml | tail -1 | awk '{print $2}'
    else
      echo "admin"
    fi
  register: harbor_admin_password
  changed_when: false

- name: "Display Harbor access information"
  ansible.builtin.debug:
    msg: |
      Harbor is now running on:
      HTTP:  http://{{ ansible_default_ipv4.address }}:{{ harbor_http_port }}
      HTTPS: https://{{ ansible_default_ipv4.address }}:{{ harbor_https_port }}
      Default admin credentials:
      Username: admin
      Password: {{ harbor_admin_password.stdout }}
      
      To login via Docker:
      docker login {{ ansible_default_ipv4.address }}:{{ harbor_https_port }}

- name: "Create Harbor management script"
  ansible.builtin.template:
    src: harbor-manage.sh.j2
    dest: /usr/local/bin/harbor-manage
    mode: '0755'

- name: "Create Harbor backup script"
  ansible.builtin.template:
    src: harbor-backup.sh.j2
    dest: /usr/local/bin/harbor-backup
    mode: '0755'