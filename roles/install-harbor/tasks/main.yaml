---
- name: "Update package cache"
  ansible.builtin.apt:
    update_cache: yes

- name: "Install required packages for Harbor"
  ansible.builtin.apt:
    name:
      - curl
      - wget
      - unzip
      - docker.io
      - docker-compose
      - python3-pip
      - ufw
    state: present

- name: "Start and enable Docker service"
  ansible.builtin.systemd:
    name: docker
    enabled: yes
    state: started

- name: "Add current user to docker group"
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: "Create Harbor installation directory"
  ansible.builtin.file:
    path: /opt/harbor
    state: directory
    mode: '0755'

- name: "Download Harbor offline installer"
  ansible.builtin.get_url:
    url: "https://github.com/goharbor/harbor/releases/download/v2.10.0/harbor-offline-installer-v2.10.0.tgz"
    dest: /opt/harbor/harbor-offline-installer-v2.10.0.tgz
    mode: '0644'
    timeout: 300

- name: "Extract Harbor installer"
  ansible.builtin.unarchive:
    src: /opt/harbor/harbor-offline-installer-v2.10.0.tgz
    dest: /opt/harbor
    remote_src: yes

- name: "Create Harbor data directory"
  ansible.builtin.file:
    path: /data/harbor
    state: directory
    mode: '0755'

- name: "Set Harbor data directory permissions"
  ansible.builtin.file:
    path: /data/harbor
    owner: 10000
    group: 10000
    mode: '0755'
    recurse: yes

- name: "Copy Harbor configuration template"
  ansible.builtin.copy:
    src: /opt/harbor/harbor/harbor.yml.tmpl
    dest: /opt/harbor/harbor/harbor.yml
    remote_src: yes
    mode: '0644'

- name: "Update Harbor configuration with custom settings"
  ansible.builtin.replace:
    path: /opt/harbor/harbor/harbor.yml
    regexp: '^hostname: reg.mydomain.com'
    replace: 'hostname: {{ ansible_default_ipv4.address }}'

- name: "Update Harbor admin password"
  ansible.builtin.replace:
    path: /opt/harbor/harbor/harbor.yml
    regexp: '^harbor_admin_password: Harbor12345'
    replace: 'harbor_admin_password: Harbor12345'

- name: "Update Harbor database password"
  ansible.builtin.replace:
    path: /opt/harbor/harbor/harbor.yml
    regexp: '^  password: root123'
    replace: '  password: root123'

- name: "Update Harbor data volume path"
  ansible.builtin.replace:
    path: /opt/harbor/harbor/harbor.yml
    regexp: '^data_volume: /data'
    replace: 'data_volume: /data/harbor'

- name: "Install Harbor"
  ansible.builtin.shell: |
    cd /opt/harbor/harbor
    ./install.sh --with-trivy
  args:
    creates: /opt/harbor/harbor/docker-compose.yml
  register: harbor_install_result

- name: "Wait for Harbor services to start"
  ansible.builtin.wait_for:
    port: 80
    host: "{{ ansible_default_ipv4.address }}"
    delay: 30
    timeout: 300

- name: "Configure firewall for Harbor HTTP"
  ansible.builtin.ufw:
    rule: allow
    port: 80
    proto: tcp

- name: "Configure firewall for Harbor HTTPS"
  ansible.builtin.ufw:
    rule: allow
    port: 443
    proto: tcp

- name: "Get Harbor admin password"
  ansible.builtin.shell: |
    if [ -f "/opt/harbor/harbor/harbor.yml" ]; then
      grep -A 1 "harbor_admin_password:" /opt/harbor/harbor/harbor.yml | tail -1 | awk '{print $2}'
    else
      echo "Harbor12345"
    fi
  register: harbor_admin_password
  changed_when: false

- name: "Display Harbor access information"
  ansible.builtin.debug:
    msg: |
      Harbor is now running on:
      HTTP:  http://{{ ansible_default_ipv4.address }}:80
      HTTPS: https://{{ ansible_default_ipv4.address }}:443
      Default admin credentials:
      Username: admin
      Password: {{ harbor_admin_password.stdout }}
      
      To login via Docker:
      docker login {{ ansible_default_ipv4.address }}

- name: "Create Harbor management script"
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Harbor Management Script
      
      HARBOR_DIR="/opt/harbor/harbor"
      
      case "$1" in
        start)
          echo "Starting Harbor..."
          cd $HARBOR_DIR && docker-compose up -d
          ;;
        stop)
          echo "Stopping Harbor..."
          cd $HARBOR_DIR && docker-compose down
          ;;
        restart)
          echo "Restarting Harbor..."
          cd $HARBOR_DIR && docker-compose down && docker-compose up -d
          ;;
        status)
          echo "Harbor Status:"
          cd $HARBOR_DIR && docker-compose ps
          ;;
        logs)
          echo "Harbor Logs:"
          cd $HARBOR_DIR && docker-compose logs -f
          ;;
        *)
          echo "Usage: $0 {start|stop|restart|status|logs}"
          exit 1
          ;;
      esac
    dest: /usr/local/bin/harbor-manage
    mode: '0755'

- name: "Create Harbor backup script"
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Harbor Backup Script
      
      BACKUP_DIR="/backup/harbor"
      HARBOR_DIR="/opt/harbor/harbor"
      DATA_DIR="/data/harbor"
      
      mkdir -p $BACKUP_DIR
      
      echo "Creating Harbor backup..."
      tar -czf $BACKUP_DIR/harbor-backup-$(date +%Y%m%d-%H%M%S).tar.gz \
          -C /opt harbor \
          -C /data harbor
      
      echo "Backup completed: $BACKUP_DIR/harbor-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
    dest: /usr/local/bin/harbor-backup
    mode: '0755'