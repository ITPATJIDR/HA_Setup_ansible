---
- name: "Install Python and kubernetes library"
  ansible.builtin.package:
    name:
      - python3
      - python3-kubernetes
    state: present

- name: "Create Jenkins namespace"
  kubernetes.core.k8s:
    name: jenkins
    api_version: v1
    kind: Namespace
    state: present

- name: "Create Jenkins ServiceAccount"
  kubernetes.core.k8s:
    name: jenkins
    namespace: jenkins
    api_version: v1
    kind: ServiceAccount
    state: present

- name: "Create Jenkins ClusterRole"
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: jenkins-cluster-role
      rules:
      - apiGroups: [""]
        resources: ["pods", "pods/log", "services", "secrets", "configmaps", "namespaces"]
        verbs: ["get", "list", "watch", "create", "update", "delete"]
      - apiGroups: ["apps"]
        resources: ["deployments", "statefulsets", "replicasets"]
        verbs: ["get", "list", "watch", "create", "update", "delete"]
      - apiGroups: ["networking.k8s.io"]
        resources: ["ingresses", "networkpolicies"]
        verbs: ["get", "list", "watch", "create", "update", "delete"]
      - apiGroups: ["batch"]
        resources: ["jobs", "cronjobs"]
        verbs: ["get", "list", "watch", "create", "update", "delete"]
    state: present

- name: "Create Jenkins ClusterRoleBinding"
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: jenkins-cluster-rolebinding
      subjects:
      - kind: ServiceAccount
        name: jenkins
        namespace: jenkins
      roleRef:
        kind: ClusterRole
        name: jenkins-cluster-role
        apiGroup: rbac.authorization.k8s.io
    state: present

- name: "Create Jenkins Role (for namespace-specific permissions)"
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: jenkins-role
        namespace: jenkins
      rules:
      - apiGroups: [""]
        resources: ["pods", "pods/log", "services", "secrets", "configmaps"]
        verbs: ["get", "list", "watch", "create", "update", "delete"]
      - apiGroups: ["apps"]
        resources: ["deployments", "statefulsets", "replicasets"]
        verbs: ["get", "list", "watch", "create", "update", "delete"]
      - apiGroups: ["networking.k8s.io"]
        resources: ["ingresses", "networkpolicies"]
        verbs: ["get", "list", "watch", "create", "update", "delete"]
      - apiGroups: ["batch"]
        resources: ["jobs", "cronjobs"]
        verbs: ["get", "list", "watch", "create", "update", "delete"]
    state: present

- name: "Create Jenkins RoleBinding"
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: jenkins-rolebinding
        namespace: jenkins
      subjects:
      - kind: ServiceAccount
        name: jenkins
        namespace: jenkins
      roleRef:
        kind: Role
        name: jenkins-role
        apiGroup: rbac.authorization.k8s.io
    state: present

- name: "Create Jenkins ServiceAccount token secret"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: jenkins-sa-token
        namespace: jenkins
        annotations:
          kubernetes.io/service-account.name: jenkins
      type: kubernetes.io/service-account-token
    state: present

- name: "Get API Server URL"
  ansible.builtin.shell: kubectl config view -o jsonpath='{.clusters[0].cluster.server}'
  register: api_server
  changed_when: false

- name: "Get Jenkins ServiceAccount Token"
  ansible.builtin.shell: kubectl get secret jenkins-sa-token -n jenkins -o jsonpath='{.data.token}' | base64 -d
  register: jenkins_token
  changed_when: false

- name: "Get CA Certificate"
  ansible.builtin.shell: kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority-data}' | base64 -d
  register: ca_cert
  changed_when: false

- name: "Create kubeconfig directory for Jenkins"
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/jenkins-kubeconfig
    state: directory
    mode: '0755'

- name: "Create kubeconfig file for Jenkins ServiceAccount"
  ansible.builtin.copy:
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - cluster:
          certificate-authority-data: {{ ca_cert.stdout | b64encode }}
          server: {{ api_server.stdout }}
        name: jenkins-cluster
      contexts:
      - context:
          cluster: jenkins-cluster
          user: jenkins-user
          namespace: jenkins
        name: jenkins-context
      current-context: jenkins-context
      users:
      - name: jenkins-user
        user:
          token: {{ jenkins_token.stdout }}
    dest: /home/{{ ansible_user }}/jenkins-kubeconfig/config
    mode: '0600'

- name: "Display Jenkins ServiceAccount Information"
  ansible.builtin.debug:
    msg: |
      ===============================================
      Jenkins ServiceAccount Configuration
      ===============================================
      
      API Server: {{ api_server.stdout }}
      
      ServiceAccount Token:
      {{ jenkins_token.stdout }}
      
      CA Certificate (first 100 chars):
      {{ ca_cert.stdout[:100] }}...
      
      Kubeconfig file created at:
      /home/{{ ansible_user }}/jenkins-kubeconfig/config
      
      ===============================================
      Usage Instructions:
      ===============================================
      
      Option 1 - Use kubeconfig file:
      export KUBECONFIG=/home/{{ ansible_user }}/jenkins-kubeconfig/config
      kubectl get pods --all-namespaces
      
      Option 2 - Use environment variables:
      export APISERVER="{{ api_server.stdout }}"
      export TOKEN="{{ jenkins_token.stdout }}"
      export CACERT=/path/to/ca.crt
      
      Save CA certificate to file:
      echo "{{ ca_cert.stdout }}" > ca.crt
      
      Test access:
      curl --cacert ca.crt -H "Authorization: Bearer $TOKEN" "$APISERVER/api/v1/namespaces/default/pods"
      
      ===============================================
